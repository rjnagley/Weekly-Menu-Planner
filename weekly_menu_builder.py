
### Load Necessary Packages

from pymongo import MongoClient
import random
import pandas as pd
import numpy as np


### Load Data Generated by recipe_tagger.ipynb


recipes = pd.read_csv(r"Documents/cooking project/recipes_updated2.csv")


def make_list(x):
    new = x.split(",")
    new = [y.strip(' ') for y in new]
    return new

recipes['keywords'] =  recipes['keywords'].apply(lambda x: make_list(x))


### Connect to Atlas Cluster

client = MongoClient('mongodb://rjnagley:<password>@cluster0-shard-00-00-3llbe.mongodb.net:27017,cluster0-shard-00-01-3llbe.mongodb.net:27017,cluster0-shard-00-02-3llbe.mongodb.net:27017/test?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin&retryWrites=true&w=majority')
db = client.test


### Create Collection Called 'Recipes' from CSV

url = list(recipes['link'])
meal = list(recipes['meal'])
tags = list(recipes['keywords'])
cooktime = list(recipes['time'])
servings = list(recipes['yield'])

for x in range(0, len(recipes)):
    recipe = {
        'url' : url[x],
        'meal' : meal[x],
        'tags' : tags[x],
        'cooktime': cooktime[x],
        'servings': servings[x]
    }
    result=db.recipes.insert_one(recipe)


### Define Functions to create menu based on input of meal types, dietary restrictions, and preferences


def find_meal(meal,diet_res, preferences, menu_urls):
    random_tag = random.choice(preferences)
    diet_res.append(random_tag)
    meal = list(db.recipes.aggregate([{"$match": {"meal":'dinner',"tags":{"$all": diet_res}}}, {"$sample":{"size": 1}}]))
    del diet_res[-1]
    if len(meal) > 0:
        url = meal[0]['url']
        if url in menu_urls:
            meal = None
    elif len(meal) == 0:
        meal = None
    return meal

def create_meal_type_list(breakfast_days,lunch_days, dinner_days, dessert_days):
    meal_types = []
    for i in breakfast_days:
        meal_types.append('breakfast')
    for i in lunch_days:
        meal_types.append('lunch')
    for i in dinner_days:
        meal_types.append('dinner')
    for i in dessert_days:
        meal_types.append('dessert')
    return meal_types

def url_getter(breakfast_days,lunch_days, dinner_days, dessert_days, diet_res, preferences):
    menu_urls = []
    meal_types = create_meal_type_list(breakfast_days,lunch_days, dinner_days, dessert_days)
    print(meal_types)
    for meal in meal_types:
        selection = None
        while selection is None:
            selection = find_meal(meal, diet_res, preferences, menu_urls)
            if selection is not None:
                url = selection[0]['url']
        menu_urls.append(url)     
    return menu_urls

#example of how to use code

breakfast_days = []
lunch_days = ['wednesday']
dinner_days = ['tuesday','wednesday']
dessert_days = []
diet_res = ['easy']
preferences = ['chinese','salad','chicken','italian','stew','italian','quick','egg','oreo','chocolate','quiche']
menu_urls = url_getter(breakfast_days,lunch_days, dinner_days, dessert_days, diet_res, preferences)
menu_urls

